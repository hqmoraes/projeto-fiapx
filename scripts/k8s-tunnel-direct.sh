#!/bin/bash

# Script para configurar t√∫nel SSH direto para o cluster Kubernetes
# Autor: GitHub Copilot
# Data: 26 de junho de 2025

# Constantes
REMOTE_HOST="worker.wecando.click"
REMOTE_USER="ubuntu"
SSH_KEY="/home/hqmoraes/.ssh/keyPrincipal.pem"
KUBE_CONFIG="/home/hqmoraes/.kube/config"

# Obter o IP interno do servidor Kubernetes
get_kubernetes_ip() {
    local k8s_ip=$(ssh -i "$SSH_KEY" "$REMOTE_USER@$REMOTE_HOST" "grep server ~/.kube/config | awk '{print \$2}' | cut -d/ -f3 | cut -d: -f1")
    echo "$k8s_ip"
}

# Inicia o t√∫nel SSH
start_tunnel() {
    local k8s_ip=$(get_kubernetes_ip)
    if [ -z "$k8s_ip" ]; then
        echo "‚ùå N√£o foi poss√≠vel obter o IP do servidor Kubernetes."
        exit 1
    fi
    
    echo "üîÑ Iniciando t√∫nel SSH para o cluster Kubernetes ($k8s_ip:6443)..."
    
    # Encerramos qualquer t√∫nel existente
    pkill -f "ssh -i $SSH_KEY -L 6443:$k8s_ip:6443 -N $REMOTE_USER@$REMOTE_HOST" || true
    
    # Iniciamos um novo t√∫nel
    ssh -i "$SSH_KEY" -L 6443:"$k8s_ip":6443 -N "$REMOTE_USER@$REMOTE_HOST" &
    
    # Armazenamos o PID do processo SSH
    tunnel_pid=$!
    
    # Verificamos se o processo est√° em execu√ß√£o
    if ps -p $tunnel_pid > /dev/null; then
        echo "‚úÖ T√∫nel SSH estabelecido com sucesso! (PID: $tunnel_pid)"
        echo "$tunnel_pid" > /tmp/k8s-tunnel.pid
    else
        echo "‚ùå Falha ao estabelecer t√∫nel SSH."
        exit 1
    fi
}

# Encerra o t√∫nel SSH
stop_tunnel() {
    echo "üîÑ Encerrando t√∫nel SSH..."
    if [ -f /tmp/k8s-tunnel.pid ]; then
        pid=$(cat /tmp/k8s-tunnel.pid)
        kill $pid 2>/dev/null || true
        rm -f /tmp/k8s-tunnel.pid
        echo "‚úÖ T√∫nel SSH encerrado com sucesso!"
    else
        pkill -f "ssh -i $SSH_KEY -L 6443:.* -N $REMOTE_USER@$REMOTE_HOST" || true
        echo "‚ö†Ô∏è T√∫nel SSH encerrado, mas n√£o encontrado arquivo PID."
    fi
}

# Configura o kubeconfig para usar o localhost
configure_kubeconfig() {
    echo "üîÑ Configurando arquivo kubeconfig para usar o t√∫nel SSH..."
    
    # Verifica se temos o arquivo de configura√ß√£o remoto
    if ssh -i "$SSH_KEY" "$REMOTE_USER@$REMOTE_HOST" "test -f ~/.kube/config"; then
        # Copia o arquivo de configura√ß√£o remoto
        ssh -i "$SSH_KEY" "$REMOTE_USER@$REMOTE_HOST" "cat ~/.kube/config" > "$KUBE_CONFIG"
        
        # Modifica o arquivo para usar o localhost
        sed -i "s|server: https://.*|server: https://localhost:6443|g" "$KUBE_CONFIG"
        sed -i "/certificate-authority-data:/a\\    insecure-skip-tls-verify: true" "$KUBE_CONFIG"
        
        echo "‚úÖ Arquivo kubeconfig configurado com sucesso!"
    else
        echo "‚ùå Arquivo de configura√ß√£o Kubernetes n√£o encontrado no servidor remoto."
        exit 1
    fi
}

# Verifica a conex√£o com o cluster Kubernetes
check_connection() {
    echo "üîÑ Verificando conex√£o com o cluster Kubernetes..."
    export KUBECONFIG="$KUBE_CONFIG"
    
    # Esperamos um pouco para o t√∫nel estabelecer
    sleep 3
    
    # Tentamos obter informa√ß√µes do cluster
    kubectl cluster-info
    if [ $? -eq 0 ]; then
        echo "‚úÖ Conex√£o com o cluster Kubernetes estabelecida com sucesso!"
        return 0
    else
        echo "‚ùå Falha ao conectar ao cluster Kubernetes."
        echo "   Verificando detalhes da conex√£o..."
        
        # Verificamos se o t√∫nel est√° funcionando
        nc -zv localhost 6443
        
        # Verificamos detalhes da conex√£o
        kubectl cluster-info dump --output-directory=/tmp/k8s-debug
        
        return 1
    fi
}

# Fun√ß√£o principal
main() {
    echo "üöÄ Configurando conex√£o com o cluster Kubernetes em $REMOTE_HOST"
    
    # Processa argumentos de linha de comando
    if [ "$1" == "stop" ]; then
        stop_tunnel
        exit 0
    fi
    
    # Configuramos o kubeconfig
    configure_kubeconfig
    
    # Iniciamos o t√∫nel SSH
    start_tunnel
    
    # Verificamos a conex√£o com o cluster
    if check_connection; then
        echo "üéâ Configura√ß√£o conclu√≠da! Voc√™ pode usar o kubectl normalmente agora."
        echo "   Para usar o kubectl, execute: export KUBECONFIG=$KUBE_CONFIG"
        echo ""
        echo "   Para encerrar o t√∫nel SSH, execute: $0 stop"
    else
        echo "‚ö†Ô∏è A conex√£o com o cluster Kubernetes falhou."
        echo "   Verifique as configura√ß√µes do servidor e tente novamente."
        stop_tunnel
        exit 1
    fi
}

# Executa a fun√ß√£o principal com os argumentos passados
main "$@"
