#!/bin/bash

# Script para deploy da arquitetura escal√°vel
# Configura todos os componentes para suportar processamento paralelo

set -e

NAMESPACE="fiapx"
CLUSTER_IP="15.229.40.206"

echo "üöÄ Deploy da Arquitetura Escal√°vel FIAP-X"
echo "=========================================="

# Fun√ß√£o para verificar se namespace existe
ensure_namespace() {
    if ! kubectl get namespace $NAMESPACE >/dev/null 2>&1; then
        echo "üì¶ Criando namespace $NAMESPACE..."
        kubectl create namespace $NAMESPACE
    else
        echo "‚úÖ Namespace $NAMESPACE j√° existe"
    fi
}

# Fun√ß√£o para aplicar configura√ß√µes
apply_configs() {
    echo "üîß Aplicando configura√ß√µes de escalabilidade..."
    
    # RabbitMQ com configura√ß√µes para m√∫ltiplos consumers
    echo "  üì° Configurando RabbitMQ..."
    kubectl apply -f infrastructure/kubernetes/rabbitmq/rabbitmq.yaml
    
    # Processing Service com HPA
    echo "  ‚öôÔ∏è  Configurando Processing Service com HPA..."
    kubectl apply -f infrastructure/kubernetes/processing-service/processing-service.yaml
    
    echo "‚è≥ Aguardando servi√ßos ficarem prontos..."
    kubectl wait --for=condition=ready pod -l app=rabbitmq -n $NAMESPACE --timeout=180s
    kubectl wait --for=condition=ready pod -l app=processing-service -n $NAMESPACE --timeout=180s
}

# Fun√ß√£o para verificar HPA
check_hpa() {
    echo "üìä Verificando HorizontalPodAutoscaler..."
    kubectl get hpa -n $NAMESPACE
    echo ""
    echo "üìã Detalhes do HPA:"
    kubectl describe hpa processing-service-hpa -n $NAMESPACE
}

# Fun√ß√£o para verificar m√©tricas
check_metrics() {
    echo "üìà Verificando m√©tricas dos pods..."
    kubectl top pods -n $NAMESPACE --containers 2>/dev/null || echo "‚ö†Ô∏è  Metrics server pode n√£o estar dispon√≠vel"
}

# Fun√ß√£o para testar escalabilidade
test_scalability() {
    echo "üß™ Testando escalabilidade..."
    
    echo "1. Escalando para m√°ximo (5 pods)..."
    ./scripts/scale-services.sh max
    
    echo "2. Verificando status..."
    ./scripts/scale-services.sh status
    
    echo "3. Testando HPA..."
    check_hpa
}

# Fun√ß√£o para criar servi√ßo NodePort tempor√°rio para testes
create_test_nodeport() {
    echo "üåê Criando servi√ßo NodePort para testes..."
    
    cat <<EOF | kubectl apply -f -
apiVersion: v1
kind: Service
metadata:
  name: processing-service-nodeport
  namespace: fiapx
spec:
  type: NodePort
  selector:
    app: processing-service
  ports:
  - port: 8080
    targetPort: 8080
    nodePort: 30084
EOF
    
    echo "‚úÖ Processing Service dispon√≠vel em: http://$CLUSTER_IP:30084/health"
}

# Fun√ß√£o para configurar monitoramento da fila
setup_queue_monitoring() {
    echo "üìä Configurando monitoramento da fila..."
    
    # Script para monitorar fila do RabbitMQ
    cat <<'EOF' > scripts/monitor-queue.sh
#!/bin/bash

NAMESPACE="fiapx"
CLUSTER_IP="15.229.40.206"

echo "üìä Monitor da Fila RabbitMQ"
echo "========================="

while true; do
    echo -n "$(date '+%H:%M:%S') - "
    
    # Verificar pods de processamento
    PODS=$(kubectl get pods -n $NAMESPACE -l app=processing-service --no-headers | wc -l)
    READY_PODS=$(kubectl get pods -n $NAMESPACE -l app=processing-service --no-headers | grep Running | wc -l)
    
    echo "Processing Pods: $READY_PODS/$PODS ready"
    
    sleep 5
done
EOF
    
    chmod +x scripts/monitor-queue.sh
    echo "‚úÖ Monitor criado: ./scripts/monitor-queue.sh"
}

# Menu principal
case "${1:-deploy}" in
    "deploy")
        ensure_namespace
        apply_configs
        check_hpa
        setup_queue_monitoring
        echo ""
        echo "üéâ Deploy da arquitetura escal√°vel conclu√≠do!"
        echo ""
        echo "üìã Pr√≥ximos passos:"
        echo "  1. ./scripts/scale-services.sh test     # Testar paralelismo"
        echo "  2. ./scripts/monitor-queue.sh           # Monitorar fila"
        echo "  3. Enviar m√∫ltiplos v√≠deos via frontend"
        ;;
    "test")
        test_scalability
        ;;
    "nodeport")
        create_test_nodeport
        ;;
    "monitor")
        setup_queue_monitoring
        ;;
    "status")
        echo "üìä Status da arquitetura escal√°vel:"
        echo ""
        kubectl get pods -n $NAMESPACE -l app=processing-service -o wide
        echo ""
        kubectl get hpa -n $NAMESPACE
        ;;
    *)
        echo "Uso: $0 <comando>"
        echo ""
        echo "Comandos dispon√≠veis:"
        echo "  deploy     - Deploy completo da arquitetura escal√°vel"
        echo "  test       - Teste de escalabilidade"
        echo "  nodeport   - Criar NodePort para testes"
        echo "  monitor    - Configurar monitoramento"
        echo "  status     - Status atual da arquitetura"
        ;;
esac
