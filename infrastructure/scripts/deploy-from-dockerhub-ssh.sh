#!/bin/bash

# Deploy microsservi√ßos usando imagens do Docker Hub via SSH
# Este script executa os comandos kubectl diretamente no servidor remoto

set -e

echo "üöÄ Iniciando deploy dos microsservi√ßos usando imagens do Docker Hub via SSH..."

# Configura√ß√µes
REMOTE_HOST="worker.wecando.click"
REMOTE_USER="ubuntu"
SSH_KEY="~/.ssh/keyPrincipal.pem"

# Fun√ß√£o para executar comando no servidor remoto
remote_kubectl() {
    ssh -i $SSH_KEY $REMOTE_USER@$REMOTE_HOST "$@"
}

# Verificar conectividade com o cluster
echo "üìã Verificando conectividade com o cluster..."
if ! remote_kubectl "kubectl get nodes"; then
    echo "‚ùå Erro: N√£o foi poss√≠vel conectar ao cluster Kubernetes"
    exit 1
fi

# Verificar se o namespace existe
echo "üìã Verificando namespace fiapx..."
if ! remote_kubectl "kubectl get namespace fiapx" >/dev/null 2>&1; then
    echo "‚ö†Ô∏è  Namespace fiapx n√£o encontrado, criando..."
    remote_kubectl "kubectl apply -f - <<EOF
apiVersion: v1
kind: Namespace
metadata:
  name: fiapx
EOF"
fi

# Copiar manifestos para o servidor remoto
echo "üìã Copiando manifestos para o servidor remoto..."
scp -i ~/.ssh/keyPrincipal.pem -r ../kubernetes/ ubuntu@worker.wecando.click:~/

# Verificar status dos servi√ßos de infraestrutura
echo "üìã Verificando servi√ßos de infraestrutura..."
remote_kubectl "kubectl get pods -n fiapx | grep -E '(postgres|redis|rabbitmq|minio)'"

# Deploy dos microsservi√ßos na ordem correta
echo "üîÑ Atualizando auth-service..."
remote_kubectl "kubectl apply -f ~/kubernetes/auth-service/auth-service.yaml -n fiapx"

echo "üîÑ Atualizando upload-service..."
remote_kubectl "kubectl apply -f ~/kubernetes/upload-service/upload-service.yaml -n fiapx"

echo "üîÑ Atualizando processing-service..."
remote_kubectl "kubectl apply -f ~/kubernetes/processing-service/processing-service.yaml -n fiapx"

echo "üîÑ Atualizando storage-service..."
remote_kubectl "kubectl apply -f ~/kubernetes/storage-service/storage-service.yaml -n fiapx"

# Aguardar os pods ficarem prontos
echo "‚è≥ Aguardando pods ficarem prontos..."
sleep 15

# Verificar status do deployment
echo "üìä Status dos deployments:"
remote_kubectl "kubectl get deployments -n fiapx"

echo "üìä Status dos pods:"
remote_kubectl "kubectl get pods -n fiapx -o wide"

echo "üìä Status dos servi√ßos:"
remote_kubectl "kubectl get services -n fiapx"

# Verificar se h√° pods com problemas
echo "üîç Verificando pods com problemas..."
if remote_kubectl "kubectl get pods -n fiapx | grep -E '(Error|CrashLoopBackOff|ImagePullBackOff|Pending)'"; then
    echo "‚ö†Ô∏è  Alguns pods apresentam problemas. Verificando detalhes..."
    
    # Mostrar detalhes dos pods com problemas
    problem_pods=$(remote_kubectl "kubectl get pods -n fiapx | grep -E '(Error|CrashLoopBackOff|ImagePullBackOff|Pending)' | awk '{print \$1}'")
    for pod in $problem_pods; do
        echo "üîç Detalhes do pod $pod:"
        remote_kubectl "kubectl describe pod $pod -n fiapx | tail -20"
        echo "---"
    done
else
    echo "‚úÖ Todos os pods est√£o funcionando corretamente!"
fi

# Verificar logs dos microsservi√ßos (√∫ltimas 5 linhas)
echo "üìã √öltimos logs dos microsservi√ßos:"
for service in auth-service upload-service processing-service storage-service; do
    echo "üîç Logs do $service:"
    remote_kubectl "kubectl logs -l app=$service -n fiapx --tail=5 2>/dev/null || echo 'Pod n√£o encontrado ou sem logs'"
    echo "---"
done

echo "‚úÖ Deploy conclu√≠do! Os microsservi√ßos est√£o usando as imagens do Docker Hub."
echo "üåê Imagens utilizadas:"
echo "  - hmoraes/auth-service:latest"
echo "  - hmoraes/upload-service:latest"
echo "  - hmoraes/processing-service:latest"
echo "  - hmoraes/storage-service:latest"
