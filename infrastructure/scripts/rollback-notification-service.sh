#!/bin/bash

# Script para rollback do notification-service
# Uso: ./rollback-notification-service.sh [--to-revision N] [--namespace fiapx]

set -e

# Configura√ß√µes padr√£o
NAMESPACE="fiapx"
SERVICE_NAME="notification-service"
TO_REVISION=""

# Processar argumentos
while [[ $# -gt 0 ]]; do
    case $1 in
        --to-revision)
            TO_REVISION="$2"
            shift 2
            ;;
        --namespace)
            NAMESPACE="$2"
            shift 2
            ;;
        -h|--help)
            echo "Uso: $0 [--to-revision N] [--namespace NAMESPACE]"
            echo ""
            echo "Op√ß√µes:"
            echo "  --to-revision  Revis√£o espec√≠fica para rollback (opcional)"
            echo "  --namespace    Namespace do Kubernetes (padr√£o: fiapx)"
            echo "  -h, --help     Mostra esta ajuda"
            echo ""
            echo "Exemplos:"
            echo "  $0                           # Rollback para revis√£o anterior"
            echo "  $0 --to-revision 5           # Rollback para revis√£o espec√≠fica"
            echo "  $0 --namespace production    # Rollback em namespace espec√≠fico"
            exit 0
            ;;
        *)
            echo "Op√ß√£o desconhecida: $1"
            exit 1
            ;;
    esac
done

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para imprimir com cor
print_color() {
    local color=$1
    local message=$2
    echo -e "${color}${message}${NC}"
}

# Verificar depend√™ncias
if ! command -v kubectl >/dev/null 2>&1; then
    print_color $RED "‚ùå kubectl n√£o encontrado. Instale o kubectl primeiro."
    exit 1
fi

# Verificar conectividade com o cluster
if ! kubectl cluster-info >/dev/null 2>&1; then
    print_color $RED "‚ùå N√£o foi poss√≠vel conectar ao cluster Kubernetes."
    exit 1
fi

# Verificar se o namespace existe
if ! kubectl get namespace $NAMESPACE >/dev/null 2>&1; then
    print_color $RED "‚ùå Namespace '$NAMESPACE' n√£o existe."
    exit 1
fi

# Verificar se o deployment existe
if ! kubectl get deployment $SERVICE_NAME -n $NAMESPACE >/dev/null 2>&1; then
    print_color $RED "‚ùå Deployment '$SERVICE_NAME' n√£o encontrado no namespace '$NAMESPACE'."
    exit 1
fi

print_color $BLUE "üîÑ Iniciando rollback do Notification Service..."
echo ""

# Mostrar revis√µes dispon√≠veis
print_color $BLUE "üìã Revis√µes dispon√≠veis:"
kubectl rollout history deployment/$SERVICE_NAME -n $NAMESPACE

echo ""

# Obter status atual antes do rollback
print_color $BLUE "üìä Status atual antes do rollback:"
kubectl get deployment $SERVICE_NAME -n $NAMESPACE -o wide
kubectl get pods -n $NAMESPACE -l app=$SERVICE_NAME

echo ""

# Executar rollback
if [ -n "$TO_REVISION" ]; then
    print_color $YELLOW "‚è™ Fazendo rollback para revis√£o $TO_REVISION..."
    kubectl rollout undo deployment/$SERVICE_NAME --to-revision=$TO_REVISION -n $NAMESPACE
else
    print_color $YELLOW "‚è™ Fazendo rollback para revis√£o anterior..."
    kubectl rollout undo deployment/$SERVICE_NAME -n $NAMESPACE
fi

# Aguardar o rollback
print_color $YELLOW "‚è≥ Aguardando conclus√£o do rollback..."
kubectl rollout status deployment/$SERVICE_NAME -n $NAMESPACE --timeout=300s

# Verificar status ap√≥s rollback
echo ""
print_color $BLUE "üìä Status ap√≥s rollback:"
kubectl get deployment $SERVICE_NAME -n $NAMESPACE -o wide
kubectl get pods -n $NAMESPACE -l app=$SERVICE_NAME

# Verificar se os pods est√£o ready
echo ""
print_color $YELLOW "‚è≥ Aguardando pods ficarem ready..."
kubectl wait --for=condition=ready pod -l app=$SERVICE_NAME -n $NAMESPACE --timeout=120s

# Verificar logs para garantir que est√° funcionando
echo ""
print_color $BLUE "üìã Logs ap√≥s rollback (√∫ltimas 20 linhas):"
kubectl logs -n $NAMESPACE -l app=$SERVICE_NAME --tail=20

# Health check final
echo ""
print_color $BLUE "üíö Health Check Final:"
PODS=$(kubectl get pods -n $NAMESPACE -l app=$SERVICE_NAME -o jsonpath='{.items[*].metadata.name}')

if [ -n "$PODS" ]; then
    for pod in $PODS; do
        STATUS=$(kubectl get pod $pod -n $NAMESPACE -o jsonpath='{.status.phase}')
        READY=$(kubectl get pod $pod -n $NAMESPACE -o jsonpath='{.status.conditions[?(@.type=="Ready")].status}')
        
        if [ "$STATUS" = "Running" ] && [ "$READY" = "True" ]; then
            print_color $GREEN "‚úÖ $pod: Running and Ready"
        else
            print_color $RED "‚ùå $pod: Status=$STATUS, Ready=$READY"
        fi
    done
else
    print_color $RED "‚ùå Nenhum pod encontrado ap√≥s rollback"
    exit 1
fi

# Teste b√°sico de conectividade
echo ""
print_color $BLUE "üîç Teste de conectividade:"
POD_NAME=$(kubectl get pods -n $NAMESPACE -l app=$SERVICE_NAME -o jsonpath='{.items[0].metadata.name}')
if [ -n "$POD_NAME" ]; then
    kubectl exec -n $NAMESPACE $POD_NAME -- ps aux | grep notification-service >/dev/null && {
        print_color $GREEN "‚úÖ Processo notification-service est√° rodando"
    } || {
        print_color $RED "‚ùå Processo notification-service n√£o encontrado"
    }
else
    print_color $RED "‚ùå Nenhum pod dispon√≠vel para teste"
fi

echo ""
print_color $GREEN "üéâ Rollback conclu√≠do com sucesso!"
echo ""
print_color $BLUE "üìã Resumo:"
echo "- Namespace: $NAMESPACE"
echo "- Service: $SERVICE_NAME"
if [ -n "$TO_REVISION" ]; then
    echo "- Rollback para revis√£o: $TO_REVISION"
else
    echo "- Rollback para revis√£o: anterior"
fi
echo ""
print_color $BLUE "üí° Comandos √∫teis para monitoramento:"
echo "- Monitorar pods: kubectl get pods -n $NAMESPACE -l app=$SERVICE_NAME -w"
echo "- Ver logs: kubectl logs -n $NAMESPACE -l app=$SERVICE_NAME -f"
echo "- Ver hist√≥rico: kubectl rollout history deployment/$SERVICE_NAME -n $NAMESPACE"
echo ""
print_color $YELLOW "‚ö†Ô∏è  Lembre-se de verificar se o rollback resolveu o problema e considere"
print_color $YELLOW "   investigar a causa raiz do problema na vers√£o anterior."
