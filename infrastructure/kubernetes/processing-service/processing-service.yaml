apiVersion: v1
kind: Service
metadata:
  name: processing-service
  namespace: fiapx
  labels:
    app: processing-service
spec:
  ports:
  - port: 8080
    targetPort: 8080
    name: http
  selector:
    app: processing-service
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: processing-service
  namespace: fiapx
  labels:
    app: processing-service
spec:
  replicas: 1  # Começar com 1 réplica
  selector:
    matchLabels:
      app: processing-service
  template:
    metadata:
      labels:
        app: processing-service
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 50
            podAffinityTerm:
              labelSelector:
                matchLabels:
                  app: processing-service
              topologyKey: kubernetes.io/hostname
      containers:
      - name: processing-service
        image: hmoraes/fiapx-processing-service:v2.1
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8080
        env:
        - name: MINIO_ENDPOINT
          value: "minio:9002"
        - name: MINIO_ACCESS_KEY
          value: "minioadmin"
        - name: MINIO_SECRET_KEY
          value: "minioadmin"
        - name: MINIO_USE_SSL
          value: "false"
        - name: RABBITMQ_URL
          value: "amqp://guest:guest@rabbitmq:5672/"
        - name: PORT
          value: "8080"
        # Configurações para processamento de vídeo
        - name: MAX_CONCURRENT_VIDEOS
          value: "1"  # 1 vídeo por pod
        - name: WORKER_TIMEOUT
          value: "300"  # 5 minutos timeout
        - name: FFMPEG_THREADS
          value: "2"
        resources:
          limits:
            cpu: "500m"      # Reduzindo para 0.5 CPU por pod
            memory: "800Mi"  # Reduzindo para 800MB RAM por pod (permite ~4 pods)
          requests:
            cpu: "200m"      # Reduzindo request para 0.2 CPU
            memory: "256Mi"  # Reduzindo request para 256MB RAM
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: processing-service-network-policy
  namespace: fiapx
spec:
  podSelector:
    matchLabels:
      app: processing-service
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app: api-gateway
    ports:
    - protocol: TCP
      port: 8080
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: minio
    ports:
    - protocol: TCP
      port: 9002
  - to:
    - podSelector:
        matchLabels:
          app: rabbitmq
    ports:
    - protocol: TCP
      port: 5672
---
# HorizontalPodAutoscaler para escalabilidade automática
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: processing-service-hpa
  namespace: fiapx
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: processing-service
  minReplicas: 1      # Mínimo 1 pod
  maxReplicas: 5      # Máximo 5 pods para processamento paralelo
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70  # Escalar quando CPU > 70%
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80  # Escalar quando RAM > 80%
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 30    # Estabilizar por 30s antes de escalar
      policies:
      - type: Pods
        value: 2
        periodSeconds: 60   # Máximo 2 pods por minuto
    scaleDown:
      stabilizationWindowSeconds: 300   # Esperar 5 minutos para reduzir
      policies:
      - type: Pods
        value: 1
        periodSeconds: 60   # Reduzir 1 pod por minuto
