name: Deploy Notification Service

on:
  push:
    branches: [ main ]
    paths:
      - 'notification-service/**'
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deploy even without changes'
        required: false
        default: false
        type: boolean
      image_tag:
        description: 'Custom image tag (default: latest)'
        required: false
        default: 'latest'
        type: string

env:
  DOCKER_REGISTRY: hmoraes
  SERVICE_NAME: notification-service
  NAMESPACE: fiapx
  GO_VERSION: '1.21'

jobs:
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      notification-service: ${{ steps.filter.outputs.notification-service }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check for changes
        uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            notification-service:
              - 'notification-service/**'

  test:
    name: Test Notification Service
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.notification-service == 'true' || github.event.inputs.force_deploy == 'true'
    
    services:
      rabbitmq:
        image: rabbitmq:3-management-alpine
        ports:
          - 5672:5672
          - 15672:15672
        options: >-
          --health-cmd "rabbitmq-diagnostics -q ping"
          --health-interval 30s
          --health-timeout 30s
          --health-retries 3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-notification-${{ hashFiles('notification-service/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-notification-

      - name: Install dependencies
        working-directory: ./notification-service
        run: go mod download

      - name: Format check
        working-directory: ./notification-service
        run: |
          if [ -f Makefile ]; then
            make fmt
          else
            go fmt ./...
          fi
          git diff --exit-code

      - name: Lint
        working-directory: ./notification-service
        run: |
          if [ -f Makefile ]; then
            make lint
          else
            go vet ./...
          fi

      - name: Unit tests
        working-directory: ./notification-service
        run: |
          if [ -f Makefile ]; then
            make test
          else
            go test -v ./...
          fi
        env:
          RABBITMQ_URL: amqp://guest:guest@localhost:5672/
          SMTP_HOST: smtp.example.com
          SMTP_PORT: 587
          SMTP_USERNAME: test
          SMTP_PASSWORD: test
          FROM_EMAIL: test@example.com
          FROM_NAME: Test

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.notification-service == 'true' || github.event.inputs.force_deploy == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run Gosec Security Scanner
        uses: securecodewarrior/github-action-gosec@master
        with:
          args: '-fmt sarif -out gosec.sarif ./notification-service/...'

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: gosec.sarif

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: './notification-service'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [test, security]
    if: success()
    outputs:
      image_tag: ${{ steps.meta.outputs.tags }}
      image_digest: ${{ steps.build.outputs.digest }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.SERVICE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ github.event.inputs.image_tag || 'latest' }}

      - name: Build and push
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./notification-service
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.DOCKER_REGISTRY }}/${{ env.SERVICE_NAME }}:latest
          format: spdx-json
          output-file: notification-service-sbom.spdx.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v3
        with:
          name: notification-service-sbom
          path: notification-service-sbom.spdx.json

  deploy:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: [build]
    if: success()
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add known hosts
        run: |
          ssh-keyscan -H ${{ secrets.K8S_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to Kubernetes
        run: |
          # Criar namespace se não existir
          ssh ${{ secrets.SSH_USER }}@${{ secrets.K8S_HOST }} "kubectl create namespace ${{ env.NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -"
          
          # Aplicar manifests
          scp infrastructure/kubernetes/notification-service.yaml ${{ secrets.SSH_USER }}@${{ secrets.K8S_HOST }}:/tmp/
          ssh ${{ secrets.SSH_USER }}@${{ secrets.K8S_HOST }} "kubectl apply -f /tmp/notification-service.yaml"
          
          # Forçar atualização da imagem
          ssh ${{ secrets.SSH_USER }}@${{ secrets.K8S_HOST }} "kubectl set image deployment/${{ env.SERVICE_NAME }} ${{ env.SERVICE_NAME }}=${{ env.DOCKER_REGISTRY }}/${{ env.SERVICE_NAME }}:latest -n ${{ env.NAMESPACE }}"
          
          # Aguardar rollout
          ssh ${{ secrets.SSH_USER }}@${{ secrets.K8S_HOST }} "kubectl rollout status deployment/${{ env.SERVICE_NAME }} -n ${{ env.NAMESPACE }} --timeout=300s"

      - name: Verify deployment
        run: |
          # Verificar se o deployment está rodando
          ssh ${{ secrets.SSH_USER }}@${{ secrets.K8S_HOST }} "kubectl get pods -n ${{ env.NAMESPACE }} -l app=${{ env.SERVICE_NAME }}"
          
          # Verificar logs para garantir que está funcionando
          ssh ${{ secrets.SSH_USER }}@${{ secrets.K8S_HOST }} "kubectl logs -n ${{ env.NAMESPACE }} -l app=${{ env.SERVICE_NAME }} --tail=50"

      - name: Health check
        run: |
          # Aguardar um pouco para o serviço inicializar
          sleep 30
          
          # Verificar se os pods estão ready
          ssh ${{ secrets.SSH_USER }}@${{ secrets.K8S_HOST }} "kubectl wait --for=condition=ready pod -l app=${{ env.SERVICE_NAME }} -n ${{ env.NAMESPACE }} --timeout=120s"

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    
    steps:
      - name: Notify success
        if: needs.deploy.result == 'success'
        run: |
          echo "✅ Notification Service deployed successfully!"
          echo "- Service: ${{ env.SERVICE_NAME }}"
          echo "- Namespace: ${{ env.NAMESPACE }}"
          echo "- Image: ${{ env.DOCKER_REGISTRY }}/${{ env.SERVICE_NAME }}:latest"
          echo "- Commit: ${{ github.sha }}"
          echo "- Triggered by: ${{ github.event_name }}"

      - name: Notify failure
        if: needs.deploy.result == 'failure'
        run: |
          echo "❌ Notification Service deployment failed!"
          echo "- Service: ${{ env.SERVICE_NAME }}"
          echo "- Namespace: ${{ env.NAMESPACE }}"
          echo "- Commit: ${{ github.sha }}"
          echo "- Logs: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          # Aqui você pode adicionar integração com Slack, Teams, etc.

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const status = '${{ needs.deploy.result }}';
            const emoji = status === 'success' ? '✅' : '❌';
            const message = status === 'success' ? 'deployed successfully' : 'deployment failed';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `${emoji} Notification Service ${message}!\n\n- Image: \`${{ env.DOCKER_REGISTRY }}/${{ env.SERVICE_NAME }}:latest\`\n- Commit: \`${{ github.sha }}\``
            });
